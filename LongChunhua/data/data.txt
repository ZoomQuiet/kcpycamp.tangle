
8月12日，下午站立会议。因组员对数据库设计提出异议。经讨论决定将原来Interviewee中与User相同的属性合并到User中，目的是为了在实现登录功能时方便，只操作一个数据表。Interviewee分离出name和pwd字段后，剩余部分仍然做为一个实体，但实体名称改为Resume。改后的User包含四中角色面试者，面试官，助教，管理员，以属性Typy区分其身份。Interivew实体、Resume实体与User中不同身份组成的子集发生联系。

同时，听取老师建议，主键最好不要与业务相关，因此在每个实体中都加了一个属性――ID，作为对记录的唯一标识。

在看您继续往下看之间，建议将数据库kchhd的E-R图打开，对比着往下看。图比文字直观。
现在先对E-R图作一次说明：
总共有8个实体，分别是MainTitle(主评审项）、SubTitle(子评审项）、TableVersion(评议表版本)、Qestions（面试提问)、Interview（面试记录）、User（用户,其中包括：面试者，面试官，助教，管理员，以Typy区分其身份）、Term（学期）、Resume（简历）。
各个实体之间的联系如ER图Finger 1。


MainTitle（主评审项）、SubTitle(子评审项）都只有两个属性ID和名称（name）。它们之间是一对多的关系，即一个主评审项可以有多个子评审项，一个子评审项只能属于一个主评审项。
在这里原来是作为一个实体的，现在之所以要拆分成两个实体是因为严格遵循了数据库范式的设计要求。举例说明：我要新添加一个主评审项――“编程能力”，但没有添加其所属的子项，如果是一个实体Title（ID,SubTitle,MainTitle）这样的结构，SubTitle字段会空出来，出现（100,**,编程能力）。而拆分成两个之后，在MainTitle(主评审项）的主键作为SubTitle(子评审项）中的外键。这样更符合数据库的设计原理。



TableVersion(评议表版本)：
评议表版本与两个实体相关，一个是SubTitle，一个是Interview。
一种版本的评议表有多个评审项（有多个评审主项，多个评审子项。通过子项的外键可以找到其对应的主项。）。一个评审子项可以出现在多个版本中。所以TableVersion与SubTitle是多对对的关系。
一种版本的评议表可以在几次面试中出现，针对具体一次面试使用的一定是同一版本的评议表（如：在一次面试中三个面试官拿着同属于一个版本的三份面试表对某一个面试者进行面试）。所以，TableVersion与Interview之间是一对多的关系。


Qestions（面试提问)：
该实体有两个属性，Description（问题描述）和ID（编号）。
它与Interview（面试记录）是多对多的关系。一个问题可以在多次面试中要求面试者回答，一次面试面试官会问到多个问题。在这里，Qestions与Interview之间的联系――QestionFeedback（问题反馈）有一个属性Answer，用于记录对某次面试中的某个问题的反馈信息。


Term（学期）：
Term是对训练营开班的描述，有ID（编号），Description（对开班的描述或说明），StartDate（开班日期）三个属性。
每一学期有多个学员，一个学员可以参加几次学习（比如：学员A参加了第1期，但因为某种原因，之后又参加了第2期）。Term（学期）与学员之间是多对多的关系。而这里所说的“学员”实际上就是面试者（Interviewee），面试者（Interviewee）在本版本中被移动到了User中，其他信息作为Resume出现。


Resume（简历）：
Resume（简历）是对面试者信息的描述。在这里，应小组决议要求，将姓名，登录口令等移动到User中。
一份简历只属于某一个面试者，一个面试者有一份简历，所以Resume与User中的子集Interviewee之间是一对一的联系。


User（用户,其中包括：面试者，面试官，助教，管理员，以Typy区分其身份）：
主要用于用户登录系统验证，以及根据用户身份判定对系统的操作权限。


Interview（面试记录）：
Interview（面试记录）是对每一次面试的记录。实体Interview与多个实体都有联系，特别是与User的联系复杂。
对于一次面试，要记录面试的时间、地点、面试中问到的问题、面试者、面试官、使用的评议表版本以及本次面试是面试者的第几轮面试。
一次面试中有多个面试官，每个面试官可能参加了多轮面试。一个面试者可以有多次面试，在一次面试中，只有一个面试者。所以，在Interview与User的关系中，有多对多，多对一的关系，具体是，Interview与User中的子集Interviewer是多对多;Interview与User中的子集Interviewee是多对一的联系。
此外，在一次面试中使用一种版本的面试评议表，一种版本的评议表可以在不同的面试中出现，Interview与TableVersion是多对一的联系。
Qestion与Interview是多对多的联系，原因参考对Qestions（面试提问)的解说。



附注：原来合为一个实体的原因是：“评审项目(Title）：
评审项目包括三个属性：项目编号（TitleID,作为主码）、子项目名称（SubTitle）、子项目所属的主项目名称（ManTitle）。按照数据库理论分析，本实体要分为主项目和子项目，他们是一对多的关系。这两个实体都只有两个属性（编号，名称）或者就只有一个属性――名称。然后在建表的时候将主项目表的主码作为子项目表的外码，这样将两个实体联系起来。但是，分成两个表，主目录表的主码就一个字段，而且最终还要被加入到子目录表中做为外码。这样的情况下，分成两个表是没有必要的。而且分成两个表，在数据操作需要多表查询时，还会增加时空开销。分成两个表的唯一好处是，在有非常庞大的数据时，将主目录的编号作为子目录表的外码，而不是直接用主目录名称。存储数字而不是一长串字符所需要的空间会小。这种更变所带来的存储空间的消耗对本系统影响不大。”